{"version":3,"sources":["components/FetchGiphy/FetchGiphy.tsx","components/GiphyTooltip/GiphyTooltip.tsx","components/GiphyTooltipContent/GiphyTooltipContent.tsx","components/WeirdnessSlider/WeirdnessSlider.tsx","components/SentenceChanger/SentenceChanger.tsx","components/GiphyWrapper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["axios","require","GiphyTooltip","props","selectedText","weirdnessValue","left","top","useState","url","height","width","data","setData","isLoading","setIsLoading","isError","setIsError","useEffect","a","result","images","fixed_height","fetchData","FetchGiphy","image","src","alt","className","style","console","log","useStyles","makeStyles","theme","createStyles","root","padding","display","alignItems","fontSize","justifyContent","marginTop","input","marginLeft","spacing","flex","iconButton","divider","margin","GiphyTooltipContent","setSelectedText","setLeft","setTop","isTooltipOpen","setIsTooltipOpen","divRef","useRef","classes","closeTooltip","handleOutsideClick","e","current","document","body","contains","target","addEventListener","removeEventListener","Paper","elevation","id","onMouseUp","selection","window","getSelection","isCollapsed","highlightedWord","toString","trim","rangeCount","selectionCoordinates","getRangeAt","getBoundingClientRect","ref","text","sliderTitle","WeirdnessSlider","Typography","gutterBottom","Tooltip","title","placement","arrow","viewBox","Slider","value","onChange","event","newValue","removeAllRanges","setValue","min","max","aria-labelledby","instructions","paddingTop","SentenceChanger","inputValue","setInputValue","component","InputBase","placeholder","Divider","orientation","IconButton","color","onClick","setText","GiphyWrapper","setWeirdnessValue","Fragment","flexDirection","backgroundColor","palette","background","paper","header","paddingBottom","fontWeight","subHeader","fontStyle","marginBottom","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4bf88b0a.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { exportDefaultSpecifier } from \"@babel/types\";\nconst axios = require(\"axios\");\n\n// Woulld have liked to stor this as a secret keys\nconst API_KEY = \"4Z15yuylYr1bEQkpJiBb3dd4ffvUfs5v\";\n// To prevent Mixed Content issue, I removed the htto\nconst API_URL = \"https://api.giphy.com/v1/gifs/translate?s=\";\n\nexport const FetchGiphy = (selectedText: string, weirdnessValue: number) => {\n  const [data, setData] = useState({ url: \"\", height: 0, width: 0 });\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  \n  useEffect(() => {\n    // Using search API endpoint to translate string into GIPHY\n    const url = `${API_URL}${selectedText}&api_key=${API_KEY}&weirdness=${weirdnessValue}`;\n    \n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n\n      try {\n        // I choose axios because it's one less step to parse to JSON\n        // and it felt more simple. For rapid development, simplicity is key.\n        const result = await axios(url);\n        setData(result.data.data.images.fixed_height);\n      } catch (error) {\n        setIsError(true);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchData();\n  // we only want to kick off the fetch data if selectedText has changed or weirdnessValue has changed \n  }, [selectedText, weirdnessValue]);\n\n  return { data, isLoading, isError };\n};\n","\nimport React from 'react';\nimport {FetchGiphy} from \"../FetchGiphy/FetchGiphy\";\nimport './GiphyTooltip.css'\n\ntype GiphyTooltipProps = {\n  selectedText: string\n  left: number\n  top: number\n  weirdnessValue: number\n}\n\nexport const GiphyTooltip = (props: GiphyTooltipProps) => {\n  const {selectedText, weirdnessValue, left, top} = props\n\n  if (selectedText === '') {\n    return null\n  }\n  if (selectedText) {\n    const { data, isLoading, isError } = FetchGiphy(\n      selectedText,\n      weirdnessValue\n    );\n    if (isLoading) {\n      // prevent flashing of a previous image\n      return null\n    }\n    if (data && data.url) {\n      const image = (\n        <img\n          src={data.url}\n          alt={selectedText}\n          width={data.width}\n          height={data.height}\n        />\n      );\n      return (\n          <div className={'image-container'} style={{\n            left: left - (data.width / 2),\n            // top of the selection, accounting for height and a buffer of 50\n            top: top - data.height - 30\n          }}>\n          {image}\n          </div>\n      );\n\n    }\n    if (isError) {\n      console.log('Error fetching GIPHY')\n      return null\n    }\n  }\n  return null \n};\n\n","\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { GiphyTooltip } from \"../GiphyTooltip/GiphyTooltip\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n\ntype GiphyTooltipContentProps = {\n  text: string\n  weirdnessValue: number\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: \"2px 4px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      width: '75%',\n      fontSize: '24px',\n      justifyContent: 'center',\n      marginTop: '50px',\n      '& #tooltip-content': {\n        padding: '20px',\n      }\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1\n    },\n    iconButton: {\n      padding: 10\n    },\n    divider: {\n      height: 28,\n      margin: 4\n    }\n  })\n);\n\n\nexport const GiphyTooltipContent = (props: GiphyTooltipContentProps) => {\n  const [selectedText, setSelectedText] = useState('')\n  const [left, setLeft] = useState(0)\n  const [top, setTop] = useState(0)\n  const [isTooltipOpen, setIsTooltipOpen] = useState(false)\n  const divRef = useRef<HTMLHeadingElement>(null);\n\n  const classes = useStyles();\n\n  const closeTooltip = () => {\n      setSelectedText(\"\");\n      setIsTooltipOpen(false);\n    };\n\n    \n    useEffect(() => {\n      const handleOutsideClick = (e: any) => {\n        // if clicking outside the content div, the tooltip should disappear\n        const currentRef = divRef.current;\n        if (!(currentRef || document.body).contains(e.target)) {\n          closeTooltip();\n        }\n      };\n      document.addEventListener(\"mousedown\", handleOutsideClick);\n      return () =>\n        document.removeEventListener(\"mousedown\", handleOutsideClick);\n    }, []);\n\n\n  const getSelectedText = (e: any) => {\n    let selection = window.getSelection();\n    if (selection) {\n      if (selection.isCollapsed) {\n        closeTooltip()\n      }\n      let highlightedWord = selection.toString().trim()\n      if (highlightedWord !== selectedText) {\n        if (selection.rangeCount) {\n          // coordinates of selected text\n          const selectionCoordinates = selection\n            .getRangeAt(0)\n            .getBoundingClientRect();\n          // the middle will be left plus half the the width of the selected text\n          setLeft(selectionCoordinates.left + selectionCoordinates.width / 2);\n          setTop(selectionCoordinates.top);\n          setSelectedText(selection.toString().trim());\n          setIsTooltipOpen(true);\n        }\n      }\n      // It is not possible to reslected selected text\n      // So if the text is the same, the user has clicked on \n      // The selected text. Therefore, the tooltip should close\n      if (highlightedWord === selectedText) {\n        closeTooltip()\n      }\n    } else {\n      closeTooltip()\n    }\n  }\n\n\n  return (\n    <Paper elevation={3} className={classes.root}>\n      <div\n        id=\"tooltip-content\"\n        onMouseUp={getSelectedText}\n        ref={divRef}\n      >\n        {isTooltipOpen ? (\n          <GiphyTooltip\n            left={left}\n            top={top}\n            weirdnessValue={props.weirdnessValue}\n            selectedText={selectedText}\n          />\n        ) : null}\n        {props.text}\n      </div>\n    </Paper>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {Typography, Slider, Tooltip } from \"@material-ui/core\";\nimport HelpIcon from \"@material-ui/icons/Help\";\n\ntype WeirdnessSliderProps = {\n  setValue: Function,\n  value: number\n};\n\nconst useStyles = makeStyles({\n  root: {\n    width: 200\n  },\n  sliderTitle: {\n    display: 'flex',\n    justifyContent: 'space-around',\n  }\n});\n\nconst WeirdnessSlider = (props: WeirdnessSliderProps) => {\n\n  const classes = useStyles();\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    // if you select a text, and then slide the weirdness \n    // the selection needs to be de-selected\n    let selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n    }\n    props.setValue(newValue as number);\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.sliderTitle}>\n        <Typography id=\"continuous-slider\" gutterBottom>\n          Turn up the weirdness!{\" \"}\n        </Typography>\n        <Tooltip\n          title=\"Choose how weird you would like the GIPHY's to be\"\n          placement=\"top\"\n          arrow={true}\n        >\n          <HelpIcon viewBox={\"-3 -3 34 34\"} />\n        </Tooltip>\n      </div>\n      <Slider\n        value={props.value}\n        onChange={handleChange}\n        min={0}\n        // according to the GIPHY API docs, 10 is the heighest weirdness\n        max={10}\n        aria-labelledby=\"continuous-slider\"\n      />\n    </div>\n  );\n}\n\nexport default WeirdnessSlider","\nimport React, {useState} from 'react';\nimport Paper from \"@material-ui/core/Paper\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\n\ntype SentenceChangerProps = {\n  setText: Function\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: \"2px 4px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      width: 400\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1\n    },\n    iconButton: {\n      padding: 10\n    },\n    divider: {\n      height: 28,\n      margin: 4\n    },\n    instructions: {\n      paddingTop: \"65px\"\n    }\n  })\n);\n\n\nconst SentenceChanger = (props: SentenceChangerProps) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  \n  const classes = useStyles();\n  \n  const updateText = (e: any) => {\n    props.setText(inputValue);\n    setInputValue(\"\");\n  };\n\n  return (\n    <Paper component=\"form\" className={classes.root}>\n      <InputBase\n        className={classes.input}\n        placeholder=\"Type a new sentence here\"\n        value={inputValue}\n        onChange={e => setInputValue(e.target.value)}\n      />\n      <Divider className={classes.divider} orientation=\"vertical\" />\n      <IconButton\n        color=\"primary\"\n        className={classes.iconButton}\n        onClick={updateText}\n      >\n        Submit\n      </IconButton>\n    </Paper>\n  );\n}\n\nexport default SentenceChanger","\nimport React, {useState} from 'react';\nimport {GiphyTooltipContent} from \"./GiphyTooltipContent/GiphyTooltipContent\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport WeirdnessSlider from \"./WeirdnessSlider/WeirdnessSlider\";\nimport SentenceChanger from './SentenceChanger/SentenceChanger'\n\ntype GiphyWrapper = {\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: \"2px 4px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      width: 400\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1\n    },\n    iconButton: {\n      padding: 10\n    },\n    divider: {\n      height: 28,\n      margin: 4\n    },\n    instructions: {\n      paddingTop: '65px'\n    }\n  })\n);\n\nconst GiphyWrapper = (props: GiphyWrapper) => {\n  \n  const [weirdnessValue, setWeirdnessValue] = useState(5);\n  const [text, setText] = useState(\n    \"Grammarly is an amazing tool! Enginering @ Grammarly is awesome!\"\n    );\n  \n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <GiphyTooltipContent text={text} weirdnessValue={weirdnessValue} />\n      <p className={classes.instructions}>\n        Want to create your own sentence? Try it out!\n      </p>\n      <SentenceChanger setText={setText}/> \n      <br />\n      <WeirdnessSlider value={weirdnessValue} setValue={setWeirdnessValue} />\n    </React.Fragment>\n  );\n\n}\n\nexport default GiphyWrapper","import React from \"react\";\nimport \"./App.css\";\nimport GiphyWrapper from \"./components/GiphyWrapper\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Divider from \"@material-ui/core/Divider\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      padding: \"50px\",\n      backgroundColor: theme.palette.background.paper\n    },\n    header: {\n      paddingBottom: \"10px\",\n      fontWeight: 300\n    },\n    subHeader: {\n      fontStyle: 'italic',\n      fontWeight: 300,\n      padding: '20px',\n      marginBottom: '20px',\n    },\n    divider: {\n      height: '2px',\n      width: '176px',\n      marginBottom: '10px',\n      backgroundColor: '#3f51b5',\n    }\n  })\n);\n\nfunction App() {\n\n  const classes = useStyles();\n\n\n  return (\n    <div className={classes.root}>\n      <h2 className={classes.header}>GIPHY Tooltip Fun!</h2>\n      <Divider className={classes.divider} />\n      <h4 className={classes.subHeader}>\n        Highlight over some text to get a GIPHY tooltip!\n      </h4>\n      <GiphyWrapper/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}